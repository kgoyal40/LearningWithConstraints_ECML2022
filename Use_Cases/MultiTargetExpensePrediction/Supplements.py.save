from sklearn.preprocessing import MinMaxScaler
from BoundedMultiTargetRegression import *
import pandas as pd
import statistics


def find_counter_example(X, parameters=None, K=None, num=10):
    solutions = []
    Fs = []
    if parameters is None:
        print('please provide a valid set of parameters')
        sys.exit()

    s = Solver()
    _X = RealVector('x', X.shape[1])

    for i in [0, 1, 2, 5, 6, 7, 8, 9, 11]:
        Fs.append(Or([_X[i] == v for v in np.unique(list(X.iloc[:, i]))]))

    for i in [3, 4, 10, 12]:
        Fs.append(And(_X[i] <= 1, _X[i] >= 0))

    if K is not None:
        print('adding knowledge constraints')
        Fs.append(Or(Sum([MultiLinearRegressionLearner.sumproduct(_X, parameters[j])
                          for j in range(len(parameters))]) > (_X[-1] - K[0]) / K[1],
                     MultiLinearRegressionLearner.sumproduct(_X, parameters[1]) > 0.05 * (_X[-1] - K[0]) / K[1]))

    for j in range(num):
        out = s.check(Fs)
        if out == sat:
            solution = [s.model()[x].numerator_as_long() / s.model()[x].denominator_as_long() for x in _X]
            solutions.append([solution, sum([MultiLinearRegressionLearner.sumproduct(solution, parameters[j])
                                             for j in range(len(parameters))])])
            Fs.append(Or([_X[i] != s.model()[_X[i]] for i in range(len(_X))]))
            s.reset()
        else:
            print(j, 'solutions found')
            break

    return solutions


def count_violations(X, y, K=None):
    count = 0
    for i in range(X.shape[0]):
        if (sum([y[j][i] for j in range(len(y))]) > (X['Total Household Income'][i] - K[0]) / K[1]) or \
                (y[1][i] > (0.05 * (X['Total Household Income'][i] - K[0])) / K[1]):
            count = count + 1
    return count
